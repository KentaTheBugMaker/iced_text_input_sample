name: Build and Make release
on:
  push:
    branches:
      - "master"
env:
  CARGO_TERM_COLOR: always
jobs:
  init_page:
    runs-on: ubuntu-latest
    steps:
      - id: init_page
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
        with:
          tag_name: v${{github.run_number}}
          release: Relese ${{github.sha}}
          draft: false
          prerelease: false
      - run: echo '${{steps.init_page.outputs.upload_url}}' > release_upload_url.txt
      - uses: actions/upload-artifact@v2
        with:
          name: init_page
          path: release_upload_url.txt
  build_linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: hecrj/setup-rust-action@v1
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - uses: actions/checkout@master
      - name: Install dependencies
        run: |
          export DEBIAN_FRONTED=noninteractive
          sudo apt-get -qq update
          sudo apt-get install -y libxkbcommon-dev
      - name: Build iced_text_input_sample binary
        run: cargo build --release
      - name: Pack iced_text_input_sample .deb package
        run: cargo deb --no-build --profile release --package iced_text_input_sample
      - name: prepare for pickup package
        run: mv target/debian/*.deb target/debian/sample_ubuntu2204_amd64.deb
      - name: prepare for pickup package
        run: mv target/release/iced_text_input_sample target/release/sample_linux_amd64
      - name: Archive iced_text_input_sample binary
        uses: actions/upload-artifact@v2
        with:
          name: sample-linux-x64
          path: |
            target/release/sample_linux_amd64
            target/deb/sample_ubuntu_2204_amd64.deb

  build_windows:
    runs-on: windows-latest
    steps:
      - uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@master
      - name: Enable static CRT linkage
        run: |
          mkdir .cargo
          echo '[target.x86_64-pc-windows-msvc]' >> .cargo/config
          echo 'rustflags = ["-Ctarget-feature=+crt-static"]' >> .cargo/config
      - name: Run the application without starting the shell
        run: |
          sed -i '1 i\#![windows_subsystem = \"windows\"]' src/main.rs
      - name: Build iced_text_input_sample binary
        run: cargo build --release
      - name: Rename iced_text_input_sample
        run: ren target/release/iced_text_input_sample.exe sample.exe
      - name: Archive iced_text_input_sample binary
        uses: actions/upload-artifact@v2
        with:
          name: sample-windows-x64
          path: target/release/sample.exe
  build_macos:
    runs-on: macos-latest
    steps:
      - uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@master
      - name: Build iced_text_input_sample binary
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.14
        run: cargo build --release
      - name: Rename binary
        run: mv target/release/iced_text_input_sample target/release/sample
      - name: pickup binary
        run: cp target/release/sample sample_macos_x64
      - name: Open binary via double-click
        run: chmod +x sample_macos_x64

      - name: Archive iced_text_input_sample binary
        uses: actions/upload-artifact@v2
        with:
          name: sample-macos-x64
          path: sample_macos_x64
  publish_binaries:
    name: Publish binaries.
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux, build_macos, init_page]
    steps:
      - name: load upload release_upload_url.txt
        uses: actions/download-artifact@v2
        with:
          name: init_page
      - id: upload-url
        run: |
          echo "::set-output name=url::$(cat init_page/release_upload_url.txt)"
      - name: accept binary from windows builder
        uses: actions/download-artifact@v2
        with:
          name: sample-windows-x64
      - name: accept binary from linux builder
        uses: actions/download-artifact@v2
        with:
          name: sample-linux-x64
      - name: accept binary from windows builder
        uses: actions/download-artifact@v2
        with:
          name: sample-macos-x64
      - name: Release windows artifacts
        uses: actions/upload-release-artifact@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.upload-url.outputs.url}}
          asset_path: ./sample-windows-x64/sample.exe
          asset_name: sample_windows_x64.exe
          asset_content_type: application/octet-stream
      - name: Release macos artifacts
        uses: actions/upload-release-artifact@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.upload-url.outputs.url}}
          asset_path: ./sample-macos-x64/sample_macos_x64
          asset_name: sample_macos_x64
          asset_content_type: application/octet-stream
      - name: Release linux artifacts
        uses: actions/upload-release-artifact@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.upload-url.outputs.url}}
          asset_path: ./sample-linux-x64/sample_linux_amd64
          asset_name: sample_linux_amd64
          asset_content_type: application/octet-stream
      - name: Release .deb artifacts
        uses: actions/upload-release-artifact@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.upload-url.outputs.url}}
          asset_path: ./sample-linux-x64/sample_ubuntu_2204_amd64.deb
          asset_name: sample_ubuntu_2204_amd64.deb
          asset_content_type: application/octet-stream
